(function (a) {
    a.fn.Jdropdown = function (d, e) { if (!this.length) { return } if (typeof d == "function") { e = d; d = {} } var c = a.extend({ event: "mouseover", current: "on", delay: 0, fun: "default" }, d || {}); var b = (c.event == "mouseover") ? "mouseout" : "mouseleave"; a.each(this, function () { var h = null, g = null, f = false; a(this).bind(c.event, function () { if (f) { clearTimeout(g) } else { var j = a(this); h = setTimeout(function () { if (c.fun == "default") { var _flag_temp = 0; j.addClass(c.current).children(".submenu").show(); var _c = j.children(".submenu"); var _c_height = _c.height(); var _t_height = j.height(); var _c_to_top = j.offset().top - a(window).scrollTop() + _c_height; var _j_to_top = j.offset().top - a(window).scrollTop() + _t_height; var _c_to_bottom = a(window).height() - _c_to_top; var tg_top = _c_to_bottom - 30; var _c_balance = _c_height - a(window).height(); if (_c_balance > 0) { _c.css('top', -j.offset().top + a(document).scrollTop()) } else if (_c_to_bottom < 30 && tg_top != (-1) && tg_top != 1) { if ((a(window).height() - 30) < _j_to_top) { var border_height = (a.browser.msie && a.browser.version == '7.0') ? (-2) : 2; _c.css('top', '-' + (_c_height - _t_height + border_height) + 'px') } else { _c.css('top', tg_top + 'px') } } else { _c.css('top', '0px') } if ((_flag_temp == 1) && a.browser.msie && a.browser.version < 7.0) { j.addClass(c.current).children(".submenu").hide().show() } } f = true; if (e) { e(j) } }, c.delay) } }).bind(b, function () { if (f) { var j = a(this); g = setTimeout(function () { if (c.fun == "default") { j.removeClass(c.current).children(".submenu").hide() } f = false }, c.delay) } else { clearTimeout(h) } }) }) },
a.fn.resizeimg = function (width, height) { return this.each(function () { var _this = a(this); var img = new Image(); img.onload = function () { if (this.width > 0 && this.height > 0) { if (this.width / this.height >= width / height) { if (this.width > width) { _this.width(width); _this.height((this.height * width) / this.width) } else { _this.width(this.width); _this.height(this.height) } } else { if (this.height > height) { _this.height(height); _this.width((this.width * height) / this.height) } else { _this.width(this.width); _this.height(this.height) } } } }; img.src = a(this).attr("src") }) },
a.fn.toposition = function (t, options) { var f = a(t).offset(); var opt = a.extend({}, { x: 0, y: 0 }, options); return a(this).css({ 'left': f.left + opt.x, 'top': f.top + opt.y }) },
a.fn.scrollFix = function (options) { return this.each(function () { var opts = a.extend({}, a.fn.scrollFix.defaultOptions, options); var obj = a(this), base = this, selfTop = 0, selfLeft = 0, toTop = 0, parentOffsetLeft = 0, parentOffsetTop = 0, outerHeight, outerWidth, objWidth = 0, placeholder = jQuery('<div>'), optsTop = opts.distanceTop, endfix = 0; var originalPosition; var originalOffsetTop; var originalZIndex; var lastOffsetLeft = -1; var isUnfixed = true; if (obj.length <= 0) { return } if (lastOffsetLeft == -1) { originalZIndex = obj.css('z-index'); position = obj.css('position'); originalPosition = obj.css('position'); originalOffsetTop = obj.css('top') } var zIndex = obj.css('zIndex'); if (opts.zIndex != 0) { zIndex = opts.zIndex } var parents = obj.parent(); var Position = parents.css('position'); while (!/^relative|absolutea/i.test(Position)) { parents = parents.parent(); Position = parents.css('position'); if (/^body|htmla/i.test(parents[0].tagName)) break } var ie6 = ! -[1, ] && !window.XMLHttpRequest; var resizeWindow = false; function resetScroll() { setUnfixed(); selfTop = obj.offset().top; selfLeft = obj.offset().left; outerHeight = obj.outerHeight(); outerHeight = parseFloat(outerHeight) + parseFloat(obj.css('marginBottom').replace(/auto/, 0)); outerWidth = obj.outerWidth(); objWidth = obj.width(); var documentHeight = a(document).height(); var startTop = a(opts.startTop), startBottom = a(opts.startBottom), toBottom, ScrollHeight; if (/^body|htmla/i.test(parents[0].tagName)) { parentOffsetTop = 0, parentOffsetLeft = 0 } else { parentOffsetLeft = parents.offset().left, parentOffsetTop = parents.offset().top } var bodyToTop = parseInt(jQuery('body').css('top'), 10); if (!isNaN(bodyToTop)) { optsTop += bodyToTop } if (!isNaN(opts.endPos)) { toBottom = opts.endPos } else { toBottom = parseFloat(documentHeight - a(opts.endPos).offset().top) } ScrollHeight = parseFloat(documentHeight - toBottom - optsTop), endfix = parseFloat(ScrollHeight - outerHeight); if (startTop[0]) { var startTopOffset = startTop.offset(), startTopPos = startTopOffset.top; selfTop = startTopPos } if (startBottom[0]) { var startBottomOffset = startBottom.offset(), startBottomPos = startBottomOffset.top, startBottomHeight = startBottom.outerHeight(); selfTop = parseFloat(startBottomPos + startBottomHeight) } toTop = selfTop - optsTop; toTop = (toTop > 0) ? toTop : 0; var selfBottom = documentHeight - selfTop - outerHeight; if ((toBottom != 0) && (selfBottom <= toBottom)) { return } } function setUnfixed() { if (!isUnfixed) { lastOffsetLeft = -1; placeholder.css("display", "none"); obj.css({ 'z-index': originalZIndex, 'width': '', 'position': originalPosition, 'left': '', 'top': originalOffsetTop, 'margin-left': '' }); obj.removeClass('scrollfixed'); isUnfixed = true } } function onScroll() { lastOffsetLeft = 1; var ScrollTop = a(window).scrollTop(); if (opts.bottom != -1) { ScrollTop = ScrollTop + a(window).height() - outerHeight - opts.bottom } if (ScrollTop > toTop && (ScrollTop < endfix)) { if (ie6) { obj.addClass(opts.baseClassName).css({ "z-index": zIndex, "position": "absolute", "top": opts.bottom == -1 ? ScrollTop + optsTop - parentOffsetTop : ScrollTop - parentOffsetTop, "bottom": 'auto', "left": selfLeft - parentOffsetLeft, 'width': objWidth }) } else { obj.addClass(opts.baseClassName).css({ "z-index": zIndex, "position": "fixed", "top": opts.bottom == -1 ? optsTop : '', "bottom": opts.bottom == -1 ? '' : opts.bottom, "left": selfLeft, "width": objWidth }) } placeholder.css({ 'height': outerHeight, 'width': outerWidth, 'display': 'block' }).insertBefore(obj) } else if (ScrollTop >= endfix) { obj.addClass(opts.baseClassName).css({ "z-index": zIndex, "position": "absolute", "top": endfix - parentOffsetTop + optsTop, 'bottom': '', "left": selfLeft - parentOffsetLeft, "width": objWidth }); placeholder.css({ 'height': outerHeight, 'width': outerWidth, 'display': 'block' }).insertBefore(obj) } else { obj.removeClass(opts.baseClassName).css({ "z-index": originalZIndex, "position": "static", "top": "", "bottom": "", "left": "" }); placeholder.remove() } } var Timer = 0; resetScroll(); a(window).bind("scroll", function () { if (Timer) { clearTimeout(Timer) } Timer = setTimeout(onScroll, 0) }); a(window).bind("resize", function () { if (Timer) { clearTimeout(Timer) } Timer = setTimeout(function () { isUnfixed = false; resetScroll(); onScroll() }, 0) }) }) },
a.fn.scrollFix.defaultOptions = { startTop: null, startBottom: null, distanceTop: 0, endPos: 0, bottom: -1, zIndex: 0, baseClassName: 'scrollfixed' },
a.fn.numberal = function () { a(this).css("ime-mode", "disabled"); this.bind("keypress", function (e) { var code = (e.keyCode ? e.keyCode : e.which); if (e.keyCode == 0x8) { return } return code >= 48 && code <= 57 }); this.bind("blur", function () { if (this.value.lastIndexOf(".") == (this.value.length - 1)) { this.value = this.value.substr(0, this.value.length - 1) } else if (isNaN(this.value)) { this.value = " " } if (this.value.length == 0) { this.value = 1 } }); this.bind("paste", function () { var s = clipboardData.getData('text'); if (!/\D/.test(s)); value = s.replace(/^0*/, ''); return false }); this.bind("dragenter", function () { return false }); this.bind("keyup", function () { this.value = this.value.replace(/[^\d.]/g, ""); this.value = this.value.replace(/^0/g, "1") }) },
a.fn.heightlimit = function (options) { var defaults = { height: 100, showmore: false }; var self = a(this); var _config = a.extend({}, defaults, options); if (self.height() <= _config.height) return; self.css({ "height": _config.height + "px", "overflow": "hidden" }); if (_config.showmore) { self.after(a('<a href="javascript:void(0);" class="view-all">\u67e5\u770b\u5168\u90e8&gt;&gt;</a>')); self.parent().on("click", ".view-all", function () { self.css({ "height": "auto", "overflow": "visabled" }); a(this).hide(); a(window).resize(); }) } },
a.extend({ htmlDecode: function (v) { return a('<div/>').html(v).text() }, htmlEncode: function (v) { return a('<div/>').text(v).html() } })
})(jQuery);
(function ($, window, document, undefined) { var OnePageNav = function (elem, options) { this.elem = elem; this.$elem = $(elem); this.options = options; this.metadata = this.$elem.data('plugin-options'); this.$win = $(window); this.sections = {}; this.didScroll = false; this.$doc = $(document); this.docHeight = this.$doc.height() }; OnePageNav.prototype = { defaults: { navItems: 'a', currentClass: 'current', changeHash: false, easing: 'swing', filter: '', scrollSpeed: 750, scrollThreshold: 0.5, begin: false, end: false, scrollChange: false, eventNamespace: "onePageNav" }, init: function () { this.config = $.extend({}, this.defaults, this.options, this.metadata); this.$nav = this.$elem.find(this.config.navItems); if (this.config.filter !== '') { this.$nav = this.$nav.filter(this.config.filter) } this.$nav.bind(this.getEventName('click'), $.proxy(this.handleClick, this)); this.getPositions(); this.bindInterval(); this.$win.bind(this.getEventName('resize'), $.proxy(this.getPositions, this)); return this }, adjustNav: function (self, $parent) { self.$elem.find('.' + self.config.currentClass).removeClass(self.config.currentClass); $parent.addClass(self.config.currentClass) }, getEventName: function (eventname) { return eventname + '.' + this.config.eventNamespace }, bindInterval: function () { var self = this; var docHeight; self.$win.bind(this.getEventName('scroll'), function () { self.didScroll = true }); self.t = setInterval(function () { docHeight = self.$doc.height(); if (self.didScroll) { self.didScroll = false; self.scrollChange() } if (docHeight !== self.docHeight) { self.docHeight = docHeight; self.getPositions() } }, 250) }, getHash: function ($link) { return $link.attr('href').split('#')[1] }, getPositions: function () { var self = this; var linkHref; var topPos; var $target; self.$nav.each(function () { linkHref = self.getHash($(this)); $target = $('#' + linkHref); if ($target.length) { topPos = $target.offset().top; self.sections[linkHref] = Math.round(topPos) } }) }, getSection: function (windowPos) { var returnValue = null; var windowHeight = Math.round(this.$win.height() * this.config.scrollThreshold); for (var section in this.sections) { if ((this.sections[section] - windowHeight) < windowPos) { returnValue = section } } return returnValue }, handleClick: function (e) { var self = this; var $link = $(e.currentTarget); var $parent = $link.parent(); var newLoc = '#' + self.getHash($link); if (!$parent.hasClass(self.config.currentClass)) { if (self.config.begin) { self.config.begin() } self.adjustNav(self, $parent); self.unbindInterval(); self.scrollTo(newLoc, function () { if (self.config.changeHash) { window.location.hash = newLoc } self.bindInterval(); if (self.config.end) { self.config.end() } }) } e.preventDefault() }, scrollChange: function () { var windowTop = this.$win.scrollTop(); var position = this.getSection(windowTop); var $parent; if (position !== null) { $parent = this.$elem.find('a[href$="#' + position + '"]').parent(); if (!$parent.hasClass(this.config.currentClass)) { this.adjustNav(this, $parent); if (this.config.scrollChange) { this.config.scrollChange($parent) } } } }, scrollTo: function (target, callback) { var offset = $(target).offset().top - 55; $('html, body').scrollTop(offset), callback && callback(); }, unbindInterval: function () { clearInterval(this.t); this.$win.unbind(this.getEventName('scroll')) } }; OnePageNav.defaults = OnePageNav.prototype.defaults; $.fn.onePageNav = function (options) { return this.each(function () { new OnePageNav(this, options).init() }) } })(jQuery, window, document);
(function (factory) { if (typeof define === 'function' && define.amd) { define(['jquery'], factory) } else if (typeof exports === 'object') { factory(require('jquery')) } else { factory(jQuery) } } (function ($) { var pluses = /\+/g; function encode(s) { return config.raw ? s : encodeURIComponent(s) } function decode(s) { return config.raw ? s : decodeURIComponent(s) } function stringifyCookieValue(value) { return encode(config.json ? JSON.stringify(value) : String(value)) } function parseCookieValue(s) { if (s.indexOf('"') === 0) { s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\') } try { s = decodeURIComponent(s.replace(pluses, ' ')); return config.json ? JSON.parse(s) : s } catch (e) { } } function read(s, converter) { var value = config.raw ? s : parseCookieValue(s); return $.isFunction(converter) ? converter(value) : value } var config = $.cookie = function (key, value, options) { if (value !== undefined && !$.isFunction(value)) { options = $.extend({}, config.defaults, options); if (typeof options.expires === 'number') { var days = options.expires, t = options.expires = new Date(); t.setTime(+t + days * 864e+5) } return (document.cookie = [encode(key), '=', stringifyCookieValue(value), options.expires ? '; expires=' + options.expires.toUTCString() : '', options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain : '', options.secure ? '; secure' : ''].join('')) } var result = key ? undefined : {}; var cookies = document.cookie ? document.cookie.split('; ') : []; for (var i = 0, l = cookies.length; i < l; i++) { var parts = cookies[i].split('='); var name = decode(parts.shift()); var cookie = parts.join('='); if (key && key === name) { result = read(cookie, value); break } if (!key && (cookie = read(cookie)) !== undefined) { result[name] = cookie } } return result }; config.defaults = {}; $.removeCookie = function (key, options) { if ($.cookie(key) === undefined) { return false } $.cookie(key, '', $.extend({}, options, { expires: -1 })); return !$.cookie(key) } }));